#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&soft_off { hold-time-ms = <2000>; };

&mt { tapping-term-ms = <230>; };

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    hml: hml {
        compatible = "zmk,behavior-hold-tap";
        label = "HML";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <210>;
        quick-tap-ms = <175>;
        require-prior-idle-ms = <150>;
        flavor = "balanced";
        hold-trigger-key-positions = <27 28 30 29>;
        hold-trigger-on-release;
    };

    hmr: hmr {
        compatible = "zmk,behavior-hold-tap";
        label = "HMR";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <210>;
        quick-tap-ms = <175>;
        require-prior-idle-ms = <150>;
        flavor = "balanced";
        hold-trigger-on-release;
        hold-trigger-key-positions = <34 35 36 37>;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        caps {
            bindings = <&kp CLCK>;
            key-positions = <14 15 21>;
            layers = <0>;
        };

        lock_symbol {
            bindings = <&tog 4>;
            key-positions = <7 59>;
            layers = <1 4 0 2>;
        };

        sl-func {
            bindings = <&sl 7>;
            key-positions = <17 55>;
            layers = <0 1 2>;
        };

        tog-fn {
            bindings = <&tog 7>;
            key-positions = <8 59>;
            layers = <0 1 2 7>;
        };

        left-parenth {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <29 30>;
            layers = <1 2>;
        };

        right-parenth {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <34 35>;
            layers = <1 2>;
        };

        left-brace {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <42 43>;
            layers = <1 2>;
        };

        right-bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <47 48>;
            layers = <1 2>;
        };

        left-brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <16 17>;
            layers = <1 2>;
        };

        right-bracket {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <21 22>;
            layers = <1 2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp ESC           &kp N1        &kp N2        &kp N3        &kp N4     &kp N5       &kp C_VOLUME_UP  &kp N6     &kp N7         &kp N8     &kp N9            &kp N0         &kp DEL
&kp TAB           &kp Q         &kp W         &kp E         &kp R      &kp T        &kp C_VOL_DN     &kp Y      &kp U          &kp I      &kp O             &kp P          &lt 5 BSLH
&kp LEFT_CONTROL  &kp A         &kp S         &kp D         &kp F      &kp G        &bt BT_PRV       &kp H      &kp J          &kp K      &kp L             &kp SEMI       &kp APOS
&kp LSHFT         &lt 3 Z       &kp X         &kp C         &kp V      &kp B        &bt BT_NXT       &kp N      &kp M          &kp COMMA  &kp DOT           &lt 3 FSLH     &kp RIGHT_SHIFT
&kp C_MUTE        &kp LEFT_GUI  &kp LEFT_ALT  &lt 4 ESCAPE  &kp SPACE  &lt 7 TAB    &kp C_MUTE       &kp ENTER  &kp BACKSPACE  &mo 4      &kp LEFT_CONTROL  &kp RIGHT_GUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "Base";
        };

        Home_row {
            display-name = "home row";
            bindings = <
&kp ESC           &kp N1           &kp N2           &kp N3               &kp N4             &kp N5       &kp C_VOLUME_UP  &kp N6       &kp N7             &kp N8               &kp N9             &kp N0              &kp DEL
&kp TAB           &kp Q            &kp W            &kp E                &kp R              &kp T        &kp C_VOL_DN     &kp Y        &kp U              &kp I                &kp O              &kp P               &lt 5 BSLH
&kp LEFT_CONTROL  &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LEFT_CONTROL D  &hml LEFT_SHIFT F  &kp G        &bt BT_PRV       &kp H        &hmr LEFT_SHIFT J  &hmr LEFT_CONTROL K  &hmr LEFT_ALT L    &hmr LEFT_GUI SEMI  &kp APOS
&kp LSHFT         &lt 3 Z          &kp X            &kp C                &kp V              &kp B        &bt BT_NXT       &kp N        &kp M              &kp COMMA            &kp DOT            &lt 3 FSLH          &kp RIGHT_SHIFT
&kp C_MUTE        &kp LEFT_GUI     &kp LEFT_ALT     &lt 6 ESCAPE         &kp SPACE          &lt 4 TAB    &kp C_MUTE       &lt 6 ENTER  &kp BACKSPACE      &mo 4                &kp RIGHT_CONTROL  &kp RIGHT_GUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "HomeRow";
        };

        Win_hm {
            bindings = <
&kp ESC    &kp N1           &kp N2           &kp N3               &kp N4             &kp N5       &kp C_VOLUME_UP  &kp N6     &kp N7              &kp N8                &kp N9            &kp N0               &kp DELETE
&kp TAB    &kp Q            &kp W            &kp E                &kp R              &kp T        &kp C_VOL_DN     &kp Y      &kp U               &kp I                 &kp O             &kp P                &kp BSLH
&kp LCTRL  &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LEFT_CONTROL D  &hml LEFT_SHIFT F  &kp G        &bt BT_PRV       &kp H      &hmr RIGHT_SHIFT J  &hmr RIGHT_CONTROL K  &hmr RIGHT_ALT L  &hmr RIGHT_GUI SEMI  &kp SQT
&kp LSHFT  &lt 3 Z          &kp X            &kp C                &kp V              &kp B        &bt BT_NXT       &kp N      &kp M               &kp COMMA             &kp DOT           &lt 3 SLASH          &kp RSHFT
&trans     &kp LGUI         &kp LALT         &lt 4 ESCAPE         &kp SPACE          &lt 7 TAB    &kp C_MUTE       &kp ENTER  &kp BSPC            &mo 4                 &kp RALT          &kp RGUI
            >;

            label = "win home row";
        };

        Nav {
            bindings = <
&trans  &kp F1      &kp F2    &kp F3    &kp F4     &kp F5           &kp C_VOLUME_UP   &kp F6      &kp F7    &kp F8  &kp F9     &kp F10  &kp DELETE
&trans  &trans      &kp HOME  &kp UP    &kp END    &kp PAGE_UP      &kp C_VOL_DN      &trans      &trans    &trans  &trans     &trans   &trans
&trans  &trans      &kp LEFT  &kp DOWN  &kp RIGHT  &kp PAGE_DOWN    &kp C_NEXT        &kp LEFT    &kp DOWN  &kp UP  &kp RIGHT  &trans   &trans
&trans  &trans      &trans    &trans    &trans     &trans           &kp C_NEXT        &trans      &trans    &trans  &trans     &trans   &trans
&trans  &kp INSERT  &trans    &trans    &trans     &trans           &kp C_PLAY_PAUSE  &kp C_MUTE  &trans    &trans  &kp F11    &kp F12
            >;

            display-name = "Nav";
        };

        Symbol {
            bindings = <
&kp GRAVE       &kp N1               &kp N2               &kp N3                  &kp N4                &kp N5           &trans  &kp N6      &kp N7            &kp N8            &kp N9            &kp N0                &trans
&kp TILDE       &kp LS(EXCL)         &kp LS(AT)           &kp LS(POUND)           &kp LS(DLLR)          &kp LS(PRCNT)    &trans  &trans      &kp MINUS         &kp PLUS          &trans            &kp BACKSLASH         &kp PIPE
&kp LEFT_SHIFT  &hml LEFT_GUI CARET  &hml RIGHT_ALT AMPS  &hml LEFT_CONTROL LPAR  &hml LEFT_SHIFT RPAR  &kp ASTRK        &trans  &trans      &hmr LSHFT UNDER  &hmr LCTRL EQUAL  &kp LALT          &hmr RIGHT_GUI COLON  &kp DOUBLE_QUOTES
&trans          &kp LEFT_BRACE       &kp RIGHT_BRACE      &kp LBKT                &kp RBKT              &trans           &trans  &kp PERIOD  &kp COMMA         &kp LESS_THAN     &kp GREATER_THAN  &kp QUESTION          &kp SLASH
&trans          &trans               &trans               &trans                  &trans                &trans           &trans  &trans      &trans            &trans            &trans            &trans
            >;

            display-name = "Symbol";
        };

        System {
            bindings = <
&bt BT_CLR    &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4      &rgb_ug RGB_BRI  &trans     &trans  &trans  &trans           &trans           &trans
&trans        &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4     &rgb_ug RGB_BRD  &to 0      &tog 1  &tog 2  &trans           &trans           &trans
&out OUT_TOG  &trans         &trans         &trans         &trans         &trans            &rgb_ug RGB_EFR  &trans     &trans  &trans  &rgb_ug RGB_SPD  &rgb_ug RGB_HUI  &rgb_ug RGB_SPI
&trans        &trans         &trans         &trans         &trans         &bt BT_CLR_ALL    &rgb_ug RGB_EFF  &trans     &trans  &trans  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_SAI
&trans        &trans         &trans         &trans         &trans         &trans            &rgb_ug RGB_TOG  &soft_off  &trans  &trans  &sys_reset       &bootloader
            >;

            sensor-bindings = <&scroll_encoder>;
            display-name = "System";
        };

        Mac_shortcut {
            bindings = <
&trans       &trans               &kp LG(LS(N2))  &trans               &mt LG(LS(N4)) LG(LC(LS(N4)))  &kp LG(LS(N5))           &trans  &trans                   &trans                           &trans  &trans  &trans  &trans
&kp LA(TAB)  &trans               &trans          &trans               &trans                         &trans                   &trans  &trans                   &trans                           &trans  &trans  &trans  &trans
&trans       &mt LG(LS(A)) LG(A)  &trans          &trans               &trans                         &trans                   &trans  &trans                   &trans                           &trans  &trans  &trans  &trans
&trans       &kp LG(Z)            &trans          &mt LS(LG(C)) LG(C)  &kp LG(V)                      &trans                   &trans  &mt LA(LS(N)) LC(LA(N))  &trans                           &trans  &trans  &trans  &trans
&trans       &trans               &trans          &trans               &kp LG(SPACE)                  &kp LG(LS(LC(SPACE)))    &trans  &kp LG(ENTER)            &mt LG(BACKSPACE) LA(BACKSPACE)  &trans  &trans  &trans
            >;

            display-name = "Mac";
        };

        Func {
            bindings = <
&trans  &kp F1             &kp F2             &kp F3            &kp F4          &kp F5     &trans  &kp MINUS  &kp N7              &kp N8                 &kp N9             &kp ASTRK      &trans
&trans  &kp F6             &kp F7             &kp F8            &kp F9          &kp F10    &trans  &kp PLUS   &kp N4              &kp N5                 &kp N6             &kp SLASH      &trans
&trans  &hml LEFT_GUI F11  &hml LEFT_ALT F12  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &trans     &trans  &kp EQUAL  &hmr LEFT_SHIFT N1  &hmr RIGHT_CONTROL N2  &hmr RIGHT_ALT N3  &kp RGUI       &trans
&trans  &trans             &trans             &trans            &trans          &trans     &trans  &trans     &kp COMMA           &kp N0                 &kp DOT            &kp LESS_THAN  &kp GREATER_THAN
&trans  &trans             &trans             &trans            &trans          &trans     &trans  &trans     &trans              &trans                 &trans             &trans
            >;

            label = "function";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        system_layer {
            if-layers = <4 3>;
            then-layer = <5>;
        };
    };
};
